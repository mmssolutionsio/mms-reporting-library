@use "variables";
@use "mixins";
@use "sass:map";
@use "sass:list";
@use "sass:math";

@function map-get-next($map, $key, $fallback: false, $return: value) {
    // Check if map is valid
    @if type-of($map) == map {
        // Check if key exists in map
        @if map-has-key($map, $key) {
            // Init index counter variable
            $i: 0;
            // Init key index
            $key-index: false;
            // Traverse map for key
            @each $map-key, $map-value in $map {
                // Update index
                $i: $i + 1;
                // If map key found, set key index
                @if $map-key == $key {
                    $key-index: $i;
                }
                // If next index return next value or key based on $return
                @if $i == $key-index + 1 {
                    @if $return == key {
                        @return $map-key;
                    } @else {
                        @return $map-value;
                    }
                }
                // If last entry return false
                @if $i == length($map) {
                    @return $fallback;
                }
            }
            @warn 'No next map item for key #{$key}';
            @return $fallback;
        }
        @warn 'No valid key #{$key} in map';
        @return $fallback;
    }
    @warn 'No valid map';
    @return $fallback;
}

@function size-unit($size, $size-unit: false) {
    @if not $size-unit {
        $size-unit: variables.$size-unit;
    }
    @if type-of($size) == "number" and unitless($size) and $size != 0 {
        @if $size-unit == "rem" {
            @return math.div($size, variables.$root-size)+rem;
        } @else if $size-unit == "in" {
            @return math.div($size, variables.$dpi)+in;
        } @else {
            @return $size+$size-unit;
        }
    }
    @else if $size == false {
        @return unset;
    }
    @else if $size == null {
        @return unset;
    }
    @else {
        @return #{$size};
    }
}

@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return math.div($number, ($number * 0 + 1));
    }

    @return $number;
}

@function is-root-style($list, $map: map.merge(mixins.$styles, variables.$root-styles)) {
    $current: false;
    $next: ();

    @each $key, $index in $list {
        @if $current == false {
            $current: $key;
        } @else {
            $next: list.append($next, $key);
        }
    }

    @if $current and map.has-key($map, $current) {
        @if list.length($next) > 0 {
            @return is($next, map.get($map, $current));
        } @else {
            @return true;
        }
    } @else {
        @return false;
    }
}

@function get-root-style($list, $map: map.merge(mixins.$styles, variables.$root-styles)) {
    $current: false;
    $next: ();

    @each $key, $index in $list {
        @if $current == false {
            $current: $key;
        } @else {
            $next: list.append($next, $key);
        }
    }

    @if $current and map.has-key($map, $current) {
        @if list.length($next) > 0 {
            @return get($next, map.get($map, $current));
        } @else {
            @return map.get($map, $current);
        }
    } @else {
        @return false;
    }
}
